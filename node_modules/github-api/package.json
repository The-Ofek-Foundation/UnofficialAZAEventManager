{
  "name": "github-api",
  "version": "0.10.7",
  "description": "A higher-level wrapper around the Github API.",
  "main": "github.js",
  "dependencies": {
    "js-base64": "^2.1.8",
    "karma-phantomjs-launcher": "^0.2.1",
    "xmlhttprequest": "~1.7.0"
  },
  "devDependencies": {
    "chai": "^3.4.0",
    "codecov": "^1.0.1",
    "gulp": "^3.9.0",
    "gulp-jscs": "^3.0.1",
    "gulp-jscs-stylish": "^1.2.1",
    "gulp-jshint": "^1.11.2",
    "gulp-rename": "^1.2.2",
    "gulp-uglify": "^1.4.2",
    "istanbul": "^0.3.13",
    "jshint": "^2.5.8",
    "jshint-stylish": "^2.0.1",
    "karma": "^0.13.14",
    "karma-chai": "^0.1.0",
    "karma-coverage": "^0.5.3",
    "karma-json-fixtures-preprocessor": "0.0.5",
    "karma-mocha": "^0.2.0",
    "karma-mocha-reporter": "^1.1.1",
    "karma-sauce-launcher": "^0.3.0",
    "mocha": "^2.3.3"
  },
  "scripts": {
    "test": "gulp test && gulp lint",
    "lint": "gulp lint",
    "codecov": "cat coverage/*/lcov.info | codecov"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/michael/github.git"
  },
  "keywords": [
    "github",
    "api"
  ],
  "contributors": [
    {
      "name": "Ã†ndrew Rininsland",
      "email": "aendrew.rininsland@thetimes.co.uk",
      "url": "http://www.aendrew.com"
    },
    {
      "name": "Aurelio De Rosa",
      "url": "http://www.audero.it/"
    },
    {
      "name": "Michael Aufreiter",
      "url": "http://substance.io"
    }
  ],
  "license": "BSD-3-Clause-Clear",
  "readmeFilename": "README.md",
  "gitHead": "aa8aa3c8cd5ce5240373d4fd1d06a7ab4af41a36",
  "bugs": {
    "url": "https://github.com/michael/github/issues"
  },
  "browser": {
    "xmlhttprequest": false,
    "base64": false
  },
  "readme": "# Github.js\n\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/michael/github?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)[![Stories in Ready](https://badge.waffle.io/michael/github.png?label=ready&title=Ready)](https://waffle.io/michael/github)[![Build Status](https://travis-ci.org/darvin/github.svg?branch=master)](https://travis-ci.org/darvin/github)[![codecov.io](https://codecov.io/github/michael/github/coverage.svg?branch=master)](https://codecov.io/github/michael/github?branch=master)\n\nGithub.js provides a minimal higher-level wrapper around git's [plumbing commands](http://git-scm.com/book/en/Git-Internals-Plumbing-and-Porcelain), exposing an API for manipulating GitHub repositories on the file level. It was formerly developed in the context of [Prose](http://prose.io), a content editor for GitHub.\n\n## Installation\n\nEither grab `github.js` from this repo or install Github.js via npm:\n\n```\nnpm install github-api\n```\n\nAlternatively, you can install the library using Bower:\n\n```\nbower install github-api\n```\n\n## Usage\n\nCreate a Github instance.\n\n```js\nvar github = new Github({\n  username: \"YOU_USER\",\n  password: \"YOUR_PASSWORD\",\n  auth: \"basic\"\n});\n```\n\nOr if you prefer OAuth, it looks like this:\n\n```js\nvar github = new Github({\n  token: \"OAUTH_TOKEN\",\n  auth: \"oauth\"\n});\n```\n\nYou can use either:\n* Authorised App Tokens (via client/secret pairs), used for bigger applications, created in web-flows/on the fly\n* Personal Access Tokens (simpler to set up), used on command lines, scripts etc, created in GitHub web UI\n\nSee these pages for more info:\n\n[Creating an access token for command-line use](https://help.github.com/articles/creating-an-access-token-for-command-line-use)\n\n[Github API OAuth Overview] (http://developer.github.com/v3/oauth)\n\nEnterprise Github instances may be specified using the `apiUrl` option:\n\n```js\nvar github = new Github({\n  apiUrl: \"https://serverName/api/v3\",\n  ...\n});\n```\n\n## Repository API\n\n\n```js\nvar repo = github.getRepo(username, reponame);\n```\n\nShow repository information\n\n```js\nrepo.show(function(err, repo) {});\n```\n\nDelete a repository\n\n```js\nrepo.deleteRepo(function(err, res) {});\n```\n\nGet contents at a particular path in a particular branch.\n\n```js\nrepo.contents(branch, \"path/to/dir\", function(err, contents) {});\n```\n\nFork repository. This operation runs asynchronously. You may want to poll for `repo.contents` until the forked repo is ready.\n\n```js\nrepo.fork(function(err) {});\n```\n\nCreate new branch for repo. You can omit oldBranchName to default to \"master\".\n\n```js\nrepo.branch(oldBranchName, newBranchName, function(err) {});\n```\n\nList Pull Requests.\n\n```js\nvar state = 'open'; //or 'closed', or 'all'\nrepo.listPulls(state, function(err, pullRequests) {});\n```\n\nGet details of a Pull Request.\n\n```js\nvar pullRequestID = 123;\nrepo.getPull(pullRequestID, function(err, pullRequestInfo) {});\n```\n\nCreate Pull Request.\n\n```js\nvar pull = {\n  title: message,\n  body: \"This pull request has been automatically generated by Prose.io.\",\n  base: \"gh-pages\",\n  head: \"michael\" + \":\" + \"prose-patch\"\n};\nrepo.createPullRequest(pull, function(err, pullRequest) {});\n```\n\nRetrieve all available branches (aka heads) of a repository.\n\n```js\nrepo.listBranches(function(err, branches) {});\n```\n\nStore contents at a certain path, where files that don't yet exist are created on the fly.\nYou can also provide an optional object literal, (`options` in the example below) containing information about the author and the committer.\n\n```js\nvar options = {\n  author: {name: 'Author Name', email: 'author@example.com'},\n  committer: {name: 'Committer Name', email: 'committer@example.com'},\n  encode: true // Whether to base64 encode the file. (default: true)\n}\nrepo.write('master', 'path/to/file', 'YOUR_NEW_CONTENTS', 'YOUR_COMMIT_MESSAGE', options, function(err) {});\n```\n\nNot only can you can write files, you can of course read them.\n\n```js\nrepo.read('master', 'path/to/file', function(err, data) {});\n```\n\nMove a file from A to B.\n\n```js\nrepo.move('master', 'path/to/file', 'path/to/new_file', function(err) {});\n```\n\nRemove a file.\n\n```js\nrepo.remove('master', 'path/to/file', function(err) {});\n```\n\nGet information about a particular commit.\n\n```js\nrepo.getCommit('master', sha, function(err, commit) {});\n```\n\nExploring files of a repository is easy too by accessing the top level tree object.\n\n```js\nrepo.getTree('master', function(err, tree) {});\n```\n\nIf you want to access all blobs and trees recursively, you can add `?recursive=true`.\n\n```js\nrepo.getTree('master?recursive=true', function(err, tree) {});\n```\n\nGiven a filepath, retrieve the reference blob or tree sha.\n\n```js\nrepo.getSha('master', '/path/to/file', function(err, sha) {});\n```\n\nFor a given reference, get the corresponding commit sha.\n\n```js\nrepo.getRef('heads/master', function(err, sha) {});\n```\n\nCreate a new reference.\n\n```js\nvar refSpec = {\n  \"ref\": \"refs/heads/my-new-branch-name\",\n  \"sha\": \"827efc6d56897b048c772eb4087f854f46256132\"\n};\nrepo.createRef(refSpec, function(err) {});\n```\n\nDelete a reference.\n\n```js\nrepo.deleteRef('heads/gh-pages', function(err) {});\n```\n\nGet contributors list with additions, deletions, and commit counts.\n\n```js\nrepo.contributors(function(err, data) {});\n```\n\n## User API\n\n\n```js\nvar user = github.getUser();\n```\n\nList repositories of the authenticated user, including private repositories and repositories in which the user is a collaborator and not an owner.\n\n```js\nuser.repos(options, function(err, repos) {});\n```\n\nList organizations the autenticated user belongs to.\n\n```js\nuser.orgs(function(err, orgs) {});\n```\n\nList authenticated user's gists.\n\n```js\nuser.gists(function(err, gists) {});\n```\n\nList unread notifications for the authenticated user.\n\n```js\nuser.notifications(options, function(err, notifications) {});\n```\n\nShow user information for a particular username. Also works for organizations. Pass in a falsy value (null, '', etc) for 'username' to retrieve user information for the currently authorized user.\n\n```js\nuser.show(username, function(err, user) {});\n```\n\nList public repositories for a particular user.\n\n```js\nuser.userRepos(username, function(err, repos) {});\n```\n\nList starred repositories for a particular user.\n\n```js\nuser.userStarred(username, function(err, repos) {});\n```\n\nCreate a new repo for the authenticated user\n\n```js\nuser.createRepo({\"name\": \"test\"}, function(err, res) {});\n```\nRepo description, homepage, private/public can also be set.\nFor a full list of options see the docs [here](https://developer.github.com/v3/repos/#create)\n\n\nList repositories for a particular organization. Includes private repositories if you are authorized.\n\n```js\nuser.orgRepos(orgname, function(err, repos) {});\n```\n\nList all gists of a particular user. If username is ommitted gists of the current authenticated user are returned.\n\n```js\nuser.userGists(username, function(err, gists) {});\n```\n\n## Gist API\n\n```js\nvar gist = github.getGist(3165654);\n```\n\nRead the contents of a Gist.\n\n```js\ngist.read(function(err, gist) {\n\n});\n```\n\nUpdating the contents of a Gist. Please consult the documentation on [GitHub](http://developer.github.com/v3/gists/).\n\n```js\nvar delta = {\n  \"description\": \"the description for this gist\",\n  \"files\": {\n    \"file1.txt\": {\n      \"content\": \"updated file contents\"\n    },\n    \"old_name.txt\": {\n      \"filename\": \"new_name.txt\",\n      \"content\": \"modified contents\"\n    },\n    \"new_file.txt\": {\n      \"content\": \"a new file\"\n    },\n    \"delete_this_file.txt\": null\n  }\n};\n\ngist.update(delta, function(err, gist) {\n\n});\n```\n## Issues API\n\n```js\nvar issues = github.getIssues(username, reponame);\n```\n\nTo read all the issues of a given repository\n\n```js\nissues.list(options, function(err, issues) {});\n```\n\nTo comment in a issue\n\n```js\nissues.comment(issue, comment,function(err, comment) {});\n```\n\n## Search API\n\n```js\nvar search = github.getSearch(query);\n```\n\n### Search repositories\n\nSuppose you want to search for popular Tetris repositories written in Assembly. Your query might look like this:\n\n```js\nvar search = github.getSearch(\"tetris+language:assembly&sort=stars&order=desc\");\nsearch.repositories(options, function (err, repositories) {});\n```\n\n### Search code\n\nSuppose you want to find the definition of the addClass function inside jQuery. Your query would look something like this:\n\n```js\nvar search = github.getSearch(\"addClass+in:file+language:js+repo:jquery/jquery\");\nsearch.code(options, function (err, codes) {});\n```\n\n### Search issues\n\nLetâ€™s say you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this:\n\n```js\nvar search = github.getSearch(\"windows+label:bug+language:python+state:open&sort=created&order=asc\");\nsearch.issues(options, function (err, issues) {});\n```\n\n### Search users\n\nImagine youâ€™re looking for a list of popular users. You might try out this query:\n\n```js\nvar search = github.getSearch(\"tom+repos:%3E42+followers:%3E1000\");\nsearch.users(options, function (err, users) {});\n```\n\nHere, weâ€™re looking at users with the name Tom. Weâ€™re only interested in those with more than 42 repositories, and only if they have over 1,000 followers.\n\n\n## Change Log\n\n### 0.10.X\n\nCreate and delete repositories\nRepos - getCommit\n\n### 0.9.X\n\nPaging (introduced at tail end of 0.8.X, note: different callbacks for success & errors now)\n\n### 0.8.X\n\nFixes and tweaks, simpler auth, CI tests, node.js support, Raw+JSON, UTF8, plus:\nUsers - follow, unfollow, get info, notifications\nGists - create\nIssues - get\nRepos - createRepo, deleteRepo, createBranch, star, unstar, isStarred, getCommits, listTags, listPulls, getPull, compare\nHooks - listHooks, getHook, createHook, editHook, deleteHook\n\n### 0.7.X\n\nSwitched to a native `request` implementation (thanks @mattpass). Adds support for GitHub gists, forks and pull requests.\n\n### 0.6.X\n\nAdds support for organizations and fixes an encoding issue.\n\n### 0.5.X\n\nSmart caching of latest commit sha.\n\n### 0.4.X\n\nAdded support for [OAuth](http://developer.github.com/v3/oauth/).\n\n### 0.3.X\n\nSupport for Moving and removing files.\n\n### 0.2.X\n\nConsider commit messages.\n\n### 0.1.X\n\nInitial version.\n",
  "_id": "github-api@0.10.7",
  "_from": "github-api@"
}
